# encoding: UTF-8
#--
# This file is automatically generated. Do not modify it.
# Generated by: oedipus_lex version 2.3.1.
# Source: lib/huia/lexer.rex
#++

class Huia::Lexer
  require 'strscan'

  IDENTIFIER = /[a-zA-Z_][a-zA-Z_0-9]*/
  METHOD_SIG = /[a-z][a-zA-Z0-9_]*/
  W          = /\s+/
  NL         = /\\n/
  INT        = /(0|[1-9][0-9]*)/

  class ScanError < StandardError ; end

  attr_accessor :lineno
  attr_accessor :filename
  attr_accessor :ss
  attr_accessor :state

  alias :match :ss

  def matches
    m = (1..9).map { |i| ss[i] }
    m.pop until m[-1] or m.empty?
    m
  end

  def action
    yield
  end

  def do_parse
    while token = next_token do
      type, *vals = token

      send "lex_#{type}", *vals
    end
  end

  def scanner_class
    StringScanner
  end unless instance_methods(false).map(&:to_s).include?("scanner_class")

  def parse str
    self.ss     = scanner_class.new str
    self.lineno = 1
    self.state  ||= nil

    do_parse
  end

  def parse_file path
    self.filename = path
    open path do |f|
      parse f.read
    end
  end

  def next_token

    token = nil

    until ss.eos? or token do
      token =
        case state
        when nil then
          case
          when text = ss.scan(/'/) then
            [:state, :SINGLE_TICK_STRING]
          when text = ss.scan(/"/) then
            [:state, :DOUBLE_TICK_STRING]
          when text = ss.scan(/#{INT}\.[0-9]+/) then
            action { [ :float, text ] }
          when text = ss.scan(/0x[0-9a-fA-F]+/) then
            action { [ :integer, text.to_i(16) ] }
          when text = ss.scan(/0b[01]+/) then
            action { [ :integer, text.to_i(2) ] }
          when text = ss.scan(/#{INT}/) then
            action { [ :integer, text ] }
          when text = ss.scan(/\s*(\#.*)/) then
            action { [ :comment,     text ] }
          when text = ss.scan(/#{IDENTIFIER}/) then
            action { [ :identifier,  text ] }
          when text = ss.scan(/\./) then
            action { [ :dot, text ] }
          when text = ss.scan(/\:/) then
            action { [ :colon, text ] }
          when text = ss.scan(/\=/) then
            action { [ :equal, text ] }
          when text = ss.scan(/\n[\ \t]*/) then
            in_or_out_dent text
          when text = ss.scan(/\s+/) then
            # do nothing
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}): '#{text}'"
          end
        when :SINGLE_TICK_STRING then
          case
          when text = ss.scan(/[^']+/) then
            action { [ :string, text ] }
          when text = ss.scan(/'/) then
            [:state, nil]
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}): '#{text}'"
          end
        when :DOUBLE_TICK_STRING then
          case
          when text = ss.scan(/[^"]+/) then
            action { [ :string, text ] }
          when text = ss.scan(/"/) then
            [:state, nil]
          else
            text = ss.string[ss.pos .. -1]
            raise ScanError, "can not match (#{state.inspect}): '#{text}'"
          end
        else
          raise ScanError, "undefined state: '#{state}'"
        end # token = case state

      next unless token # allow functions to trigger redo w/ nil
    end # while

    raise "bad lexical result: #{token.inspect}" unless
      token.nil? || (Array === token && token.size >= 2)

    # auto-switch state
    self.state = token.last if token && token.first == :state

    token
  end # def next_token
end # class
